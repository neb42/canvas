import 'core-js/stable';
import 'regenerator-runtime/runtime';

import http from 'http';
import path from 'path';
import express from 'express';
import cookieParser from 'cookie-parser';
import cors from 'cors';
import bodyParser from 'body-parser';
import socketio from 'socket.io';
import * as Custom from 'functions-pkg';
{{ #componentPackages }}
import * as {{ name }} from '{{ package }}';
{{ /componentPackages }}

const router = express.Router();
router.use(bodyParser.json());
router.use(
  bodyParser.urlencoded({
    extended: true,
  }),
);

const functions = new Custom.Functions();

functions.registered.functions.forEach(f => {
  router.post(
    `/function_${f.name}`,
    async (request, response, next) => {
      try {
        const data = await functions[f.name](request.body);
        response.status(200).send({ data });
      } catch (error) {
        next(error);
      };
    },
  );
});

functions.registered.actions.forEach(f => {
  router.post(
    `/action_${f.name}`,
    async (request, response, next) => {
      try {
        const data = await functions[f.name](request.body);
        response.status(200).send({ data });
      } catch (error) {
        next(error);
      };
    },
  );
});

router.get('/healthz', async (request, response, next) => {
  try {
    response.sendStatus(200);
  } catch (error) {
    next(error);
  };
});

const app = express();
app.use(cookieParser());
app.use(cors({ origin: true }));
app.use('/api', router);

app.get('*', (request, response) => {
  response.sendFile(path.join(__dirname + '/index.html'));
});

const port = process.env.PORT;

const server = http.createServer(app);

const io = socketio(server);
io.origins('*:*');

const customComponents = Object.values(Custom.Components).map(({ component: _, ...c }) => ({ ...c, library: 'custom' }));

const packagedComponents = Object.values({
  {{ #customComponents }}
  ...{{ name }}.Components,
  {{ /customComponents }}
}).map(({ component: _, ...c }) => c);

io.on('connection', (socket) => {
  socket.emit('init-functions', functions.registered);
  socket.emit('init-components', [...packagedComponents, ...customComponents]); 
  socket.on('navigate-page', (url) => {
    socket.broadcast.emit('navigate-page', url);
  });
});

if (require.main === module) {
  server.listen(port, () => {
    console.log(`listening on *:${port}`);
  });
} else {
  module.exports = server;
}