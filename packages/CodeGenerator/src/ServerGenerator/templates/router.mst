import 'core-js/stable';
import 'regenerator-runtime/runtime';

import http from 'http';
import path from 'path';
import express from 'express';
import cookieParser from 'cookie-parser';
import cors from 'cors';
import bodyParser from 'body-parser';
import socketio from 'socket.io';
import { Functions, Components } from 'functions-pkg';

const router = express.Router();
router.use(bodyParser.json());
router.use(
  bodyParser.urlencoded({
    extended: true,
  }),
);

const functions = new Functions();
functions.registered.forEach(f => {
  router.post(
    `/function_${f.name}`,
    async (request, response, next) => {
      try {
        const data = await functions[f.name](request.body);
        response.status(200).send({ data });
      } catch (error) {
        next(error);
      };
    },
  );
});

router.get('/init-functions', async (request, response, next) => {
  try {
    const data = functions.registered;
    response.status(200).send({ data });
  } catch (error) {
    next(error);
  };
});

const app = express();
app.use(cookieParser());
app.use(cors({ origin: true }));
app.use('/api', router);

app.get('*', (request, response) => {
  response.sendFile(path.join(__dirname + '/index.html'));
});

const port = 3001;

{{! if (require.main === module) {
  app.listen(port, error => {
    if (error) {
      console.error(error);
    } else {
      console.info(`Running with NODE_ENV=${process.env.NODE_ENV}`);
      console.info('==> ðŸŒŽ  Listening on http://localhost:%s/', port);
    }
  });
} else {
  module.exports = app;
} }}

const server = http.createServer(app);

const io = socketio(server);
io.origins('*:*');

io.on('connection', (socket) => {
  socket.emit('init-functions', functions.registered);
  socket.emit('init-components', Object.values(Components).map(c => ({
    name: c.name,
    description: c.description,
    category: c.category,
    icon: c.icon,
    library: 'custom',
    config: c.config,
    hasChildren: c.hasChildren,
  })));
});

if (require.main === module) {
  server.listen(port, () => {
    console.log(`listening on *:${port}`);
  });
} else {
  module.exports = server;
}