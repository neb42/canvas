import axios from 'axios';

import { getVariableDefinitions, getVariableArgs } from './selectors';

export const updateStaticVariable = (id, value) => ({
  type: 'UPDATE_STATIC_VARIABLE',
  id,
  value,
});

export const updateFunctionVariable = (id) => async (dispatch, getState) => {
  try {
    dispatch({
      type: 'FUNCTION_API_CALL_PENDING',
      id: id,
    });

    const state = getState();
    const functionId = getVariableDefinitions(state)[id].functionId;
    const args = getVariableArgs(state)(id);
    const { data: { data }, status } = await axios.post(`/api/function_${functionId}`, args);

    if (status !== 200) throw new Error(`Status code: ${status}`);

    dispatch({
      type: 'FUNCTION_API_CALL_FULFILLED',
      id: id,
      payload: data,
    });
  } catch {
    dispatch({
      type: 'FUNCTION_API_CALL_REJECTED',
      id: id,
    });
  }
};

export const updateWidget = (id, exposedProperties) => ({
  type: 'UPDATE_WIDGET',
  id,
  payload: exposedProperties,
});

export const triggerAction = (id, args) => async (dispatch) => {
  try {
    dispatch({
      type: 'ACTION_API_CALL_PENDING',
      id: id,
    });

    const { status } = await axios.post(`/api/action_${id}`, args);

    if (status !== 200) throw new Error(`Status code: ${status}`);

    dispatch({
      type: 'ACTION_API_CALL_FULFILLED',
      id: id,
    });
  } catch {
    dispatch({
      type: 'ACTION_API_CALL_REJECTED',
      id: id,
    });
  }
};

export const handleEvent = (widgetId, eventKey, push) => (dispatch, getState) => {
  const state = getState();
  const eventInstances = state.widget[widgetId].events[eventKey];
  eventInstances.forEach((ei) => {
    switch (ei.type) {
      case 'update-variable':
        dispatch(updateFunctionVariable(ei.variableId));
      case 'trigger-action':
        dispatch(triggerAction(ei.actionId, ei.args));
      case 'navigate-page':
        push(`/${ei.pageId}`);
      default:
        return;
    }
  });
};