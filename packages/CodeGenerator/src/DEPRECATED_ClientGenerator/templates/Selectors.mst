export const getWidget = state => (widget, property) => state.widget[widget][property];

export const getVariableDefinitions = state => state.variable.definitions;

const parseLookup = (variable, lookup) => lookup.split('.').reduce((acc, cur) => cur.length > 0 ? acc[cur] : acc, variable);

export const getVariable = state => (id, lookup) =>{
  const variable = state.variable.results[id];
  if (lookup && lookup.length > 0) {
    if (JSON.stringify(Object.keys(variable).sort()) === JSON.stringify(['error', 'loading', 'value'].sort())) {
      try {
        return {
          ...variable,
          value: parseLookup(variable.value, lookup),
        };
      } catch {
        return { ...variable, error: true, value: null };
      }
    }
    try {
      return parseLookup(variable, lookup);
    } catch {
      return null;
    }
  }
  return variable;
};

export const getVariableArgs = state => id => {
  const args = getVariableDefinitions(state)[id].args;

  return args.map(a => {
    if (a.type === 'static') {
      return a.value;
    }

    if (a.type === 'variable') {
      return getVariable(state)(a.variableId, null);
    }

    if (a.type === 'widget') {
      return getWidget(state)(a.widgetId, a.property);
    }
  });
};