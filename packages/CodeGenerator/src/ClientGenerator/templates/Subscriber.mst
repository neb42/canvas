import axios from 'axios';

import store from './store';
import { getWidget } from './selectors';

let currentValue;

const handleChange = async () => {
  const previousValue = currentValue;

  currentValue = store.getState();

  const definitions = currentValue.functions.definitions;

  Object.keys(definitions).forEach(async name => {
    const { args } = definitions[name];
    const prev = args.map(a => getWidget(previousValue)(a[0], a[1]));
    const current = args.map(a => getWidget(currentValue)(a[0], a[1]));
    if (JSON.stringify(prev) !== JSON.stringify(current) || !previousValue) {
      try {
        store.dispatch({
          type: 'FUNCTION_API_CALL_PENDING',
          name: name,
        });

        const { data: { data }, status } = await axios.post(`/api/function_${name}`, current);

        if (status !== 200) throw new Error(`Status code: ${status}`);

        store.dispatch({
          type: 'FUNCTION_API_CALL_FULFILLED',
          name: name,
          payload: data,
        });
      } catch(error) {
        store.dispatch({
          type: 'FUNCTION_API_CALL_REJECTED',
          name: name,
        });
      }
    }
  });
};

store.subscribe(handleChange);