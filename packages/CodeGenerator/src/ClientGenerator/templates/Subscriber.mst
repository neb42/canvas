import axios from 'axios';

import store from './store';
import { getVariableDefinitions, getVariableArgs } from './selectors';

let currentValue;

const handleChange = async () => {
  const previousValue = currentValue;

  currentValue = store.getState();

  const definitions = getVariableDefinitions(currentValue);

  Object.keys(definitions)
    .filter(id => definitions[id].type === 'function' && definitions[id].trigger === 'auto')
    .forEach(async id => {
      const prev = getVariableArgs(previousValue)(id);
      const current = getVariableArgs(currentValue)(id);

      if (JSON.stringify(prev) !== JSON.stringify(current) || !previousValue) {
        try {
          store.dispatch({
            type: 'FUNCTION_API_CALL_PENDING',
            id: id,
          });

          const functionId = definitions[id].functionId;
          const { data: { data }, status } = await axios.post(`/api/function_${functionId}`, current);

          if (status !== 200) throw new Error(`Status code: ${status}`);

          store.dispatch({
            type: 'FUNCTION_API_CALL_FULFILLED',
            id: id,
            payload: data,
          });
        } catch(error) {
          store.dispatch({
            type: 'FUNCTION_API_CALL_REJECTED',
            id: id,
          });
        }
      }
    });
};

store.subscribe(handleChange);