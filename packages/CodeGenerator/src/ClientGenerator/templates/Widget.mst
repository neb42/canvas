import React from 'react';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import styled from 'styled-components';
import { Components } from '{{{ library }}}';

import { updateWidget, updateStaticVariable, updateFunctionVariable } from '../actions';
import { getWidget, getVariable } from '../selectors';

const mapStateToProps = (state) => {
  const rawValues = {
    {{ #variableProps }}
    '{{{ key }}}': getVariable(state)('{{{ value }}}'),
    {{ /variableProps }}
    {{ #widgetProps }}
    {{{ key }}}: getWidget(state)('{{{ value }}}', 'default'),
    {{ /widgetProps }}
  };

  const loading = Object.keys(rawValues).some(k => {
    const v = rawValues[k];
    if (v && typeof v === 'object' && Object.keys(v).includes('loading')) {
      if (v.loading) {
        return true;
      }
    }
    return false;
  });

  const error = Object.keys(rawValues).some(k => {
    const v = rawValues[k];
    if (v && typeof v === 'object' && Object.keys(v).includes('error')) {
      if (v.error) {
        return true;
      }
    }
    return false;
  });

  const values = Object.keys(rawValues).reduce((acc, cur) => {
    const v = rawValues[cur];
    if (v && typeof v === 'object' && Object.keys(v).includes('value')) {
      return {
        ...acc,
        [cur]: v.value, 
      };
    }
    return { ...acc, [cur]: v };
  }, {});

  return {
    ...values,
    error,
    loading,
  };
};

const mapDispatchToProps = (dispatch) =>  bindActionCreators({
  updateWidget,
  updateStaticVariable,
  updateFunctionVariable,
}, dispatch);

const WidgetWrapper = styled.div`
  {{ #grid }}
  grid-row: {{grid.row.start}} / {{grid.row.end}};
  grid-column: {{grid.column.start}} / {{grid.column.end}};
  {{ /grid }}
`;

const Widget_{{{ name }}} = ({
  {{ #variableProps }}
  {{{ key }}},
  {{ /variableProps }}
  {{ #widgetProps }}
  {{{ key }}},
  {{ /widgetProps }}
  updateWidget,
  children,
}) => {
  const [ref, setRef] = React.useState();

  React.useEffect(() => {
    updateWidget('{{{ name }}}', {
      {{ #exposedProperties }}
      {{{ . }}}: ref.{{{ . }}},
      {{ /exposedProperties }}
    });
  }, [
    {{ #exposedProperties }}
    ref.{{{ . }}},
    {{ /exposedProperties }}
  ]);

  return React.createElement(
    WidgetWrapper,
    {}, 
    React.createElement(
      Components.{{{ component }}}.component, 
      {
        ref: r => setRef(r),
        {{ #variableProps }}
        {{{ key }}},
        {{ /variableProps }}
        {{ #widgetProps }}
        {{{ key }}},
        {{ /widgetProps }}
        {{ #staticProps }}
        {{{ key }}}: '{{{ value }}}',
        {{ /staticProps }}
      },
      {{ #children }}{{{ children }}}{{ /children }}{{ ^children }}children{{ /children }}
    ),
  );
};

export default connect(mapStateToProps, mapDispatchToProps)(Widget_{{{ name }}});