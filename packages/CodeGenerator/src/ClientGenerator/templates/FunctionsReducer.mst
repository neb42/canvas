{{=<% %>=}}
const initialState = {
  loading: true,
  results: {},
  definitions: {},
};

const functions = (state = initialState, action) => {
  switch (action.type) {
    case 'INIT_FUNCTIONS': {
      return {
        ...state,
        loading: false,
        results: action.payload.reduce((acc, cur) => ({
          ...acc,
          [cur.name]: {
            value: null,
            loading: false,
            error: false, 
          },
        }), {}),
        definitions: action.payload.reduce((acc, cur) => ({
          ...acc,
          [cur.name]: {
            name: cur.name,
            args: cur.args,
          },
        }), {}),
      };
    }
    case 'FUNCTION_API_CALL_PENDING': {
      return {
        ...state,
        results: {
          ...state.results,
          [action.name]: {
            ...state.results[action.name],
            loading: true,
            error: false,
          },
        },
      };
    }
    case 'FUNCTION_API_CALL_FULFILLED': {
      return {
        ...state,
        results: {
          ...state.results,
          [action.name]: {
            ...state.results[action.name],
            value: action.payload,
            loading: false,
            error: false,
          },
        },
      };
    }
    case 'FUNCTION_API_CALL_REJECTED': {
      return {
        ...state,
        results: {
          ...state.results,
          [action.name]: {
            ...state.results[action.name],
            loading: false,
            error: true,
          },
        },
      };
    }
    default:
      return state;
  }
};

export default functions;
