import React from 'react';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import styled from 'styled-components';

import updateWidget from '../actions/updateWidget';

{{ #dependencies }}
import selector_{{{ . }}} from '../selectors/{{{ . }}}';
{{ /dependencies }}

const mapStateToProps = (state) => {
  const rawValues = {
    {{ #dependencies }}
    {{{ . }}}: selector_{{{ . }}}(state),
    {{ /dependencies }}
  };

  const loading = Object.keys(rawValues).some(k => {
    const v = rawValues[k];
    if (v && typeof v === 'object' && Object.keys(v).includes('loading')) {
      if (v.loading) {
        return true;
      }
    }
    return false;
  });

  const error = Object.keys(rawValues).some(k => {
    const v = rawValues[k];
    if (v && typeof v === 'object' && Object.keys(v).includes('error')) {
      if (v.error) {
        return true;
      }
    }
    return false;
  });

  const values = Object.keys(rawValues).reduce((acc, cur) => {
    const v = rawValues[cur];
    if (v && typeof v === 'object' && Object.keys(v).includes('value')) {
      return {
        ...acc,
        [cur]: v.value, 
      };
    }
    return { ...acc, [cur]: v };
  }, {});

  return {
    ...values,
    error,
    loading,
  };
};

const mapDispatchToProps = (dispatch) =>  bindActionCreators({ updateWidget }, dispatch);

const WidgetWrapper = styled.div``;

const Widget_{{{ name }}} = ({
  {{ #dependencies }}
  {{{ . }}},
  {{ /dependencies }}
  updateWidget,
  children,
}) => {
  const [ref, setRef] = React.useState();

  React.useEffect(() => {
    updateWidget('{{{ name }}}', {
      {{ #exposedProperties }}
      {{{ . }}}: ref.{{{ . }}},
      {{ /exposedProperties }}
    });
  }, [
    {{ #exposedProperties }}
    ref.{{{ . }}},
    {{ /exposedProperties }}
  ]);

  return React.createElement(
    WidgetWrapper,
    {}, 
    React.createElement({{{ component }}}, { ref: r => setRef(r) }, children),
  );
};

export default connect(mapStateToProps, mapDispatchToProps)(Widget_{{{ name }}});